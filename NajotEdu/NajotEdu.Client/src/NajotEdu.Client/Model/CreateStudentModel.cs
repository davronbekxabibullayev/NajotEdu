/*
 * NajotEdu
 *
 * NajotEdu description
 *
 * The version of the OpenAPI document: V1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = NajotEdu.Client.Client.FileParameter;
using OpenAPIDateConverter = NajotEdu.Client.Client.OpenAPIDateConverter;

namespace NajotEdu.Client.Model
{
    /// <summary>
    /// CreateStudentModel
    /// </summary>
    [DataContract(Name = "CreateStudentModel")]
    public partial class CreateStudentModel
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateStudentModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateStudentModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateStudentModel" /> class.
        /// </summary>
        /// <param name="fullName">fullName (required).</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="birthDate">birthDate.</param>
        /// <param name="phoneNumber">phoneNumber (required).</param>
        public CreateStudentModel(string fullName = default(string), DateTime createdDate = default(DateTime), DateTime birthDate = default(DateTime), string phoneNumber = default(string))
        {
            // to ensure "fullName" is required (not null)
            if (fullName == null)
            {
                throw new ArgumentNullException("fullName is a required property for CreateStudentModel and cannot be null");
            }
            this.FullName = fullName;
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null)
            {
                throw new ArgumentNullException("phoneNumber is a required property for CreateStudentModel and cannot be null");
            }
            this.PhoneNumber = phoneNumber;
            this.CreatedDate = createdDate;
            this.BirthDate = birthDate;
        }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "fullName", IsRequired = true, EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets BirthDate
        /// </summary>
        [DataMember(Name = "birthDate", EmitDefaultValue = false)]
        public DateTime BirthDate { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateStudentModel {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
