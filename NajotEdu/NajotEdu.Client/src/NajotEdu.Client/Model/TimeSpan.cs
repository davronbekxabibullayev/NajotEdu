/*
 * NajotEdu
 *
 * NajotEdu description
 *
 * The version of the OpenAPI document: V1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = NajotEdu.Client.Client.FileParameter;
using OpenAPIDateConverter = NajotEdu.Client.Client.OpenAPIDateConverter;

namespace NajotEdu.Client.Model
{
    /// <summary>
    /// TimeSpan
    /// </summary>
    [DataContract(Name = "TimeSpan")]
    public partial class TimeSpan
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeSpan" /> class.
        /// </summary>
        /// <param name="ticks">ticks.</param>
        /// <param name="days">days.</param>
        /// <param name="hours">hours.</param>
        /// <param name="milliseconds">milliseconds.</param>
        /// <param name="minutes">minutes.</param>
        /// <param name="seconds">seconds.</param>
        public TimeSpan(long ticks = default(long), int days = default(int), int hours = default(int), int milliseconds = default(int), int minutes = default(int), int seconds = default(int))
        {
            this.Ticks = ticks;
            this.Days = days;
            this.Hours = hours;
            this.Milliseconds = milliseconds;
            this.Minutes = minutes;
            this.Seconds = seconds;
        }

        /// <summary>
        /// Gets or Sets Ticks
        /// </summary>
        [DataMember(Name = "ticks", EmitDefaultValue = false)]
        public long Ticks { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public int Days { get; set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [DataMember(Name = "hours", EmitDefaultValue = false)]
        public int Hours { get; set; }

        /// <summary>
        /// Gets or Sets Milliseconds
        /// </summary>
        [DataMember(Name = "milliseconds", EmitDefaultValue = false)]
        public int Milliseconds { get; set; }

        /// <summary>
        /// Gets or Sets Minutes
        /// </summary>
        [DataMember(Name = "minutes", EmitDefaultValue = false)]
        public int Minutes { get; set; }

        /// <summary>
        /// Gets or Sets Seconds
        /// </summary>
        [DataMember(Name = "seconds", EmitDefaultValue = false)]
        public int Seconds { get; set; }

        /// <summary>
        /// Gets or Sets TotalDays
        /// </summary>
        [DataMember(Name = "totalDays", EmitDefaultValue = false)]
        public double TotalDays { get; private set; }

        /// <summary>
        /// Returns false as TotalDays should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalDays()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [DataMember(Name = "totalHours", EmitDefaultValue = false)]
        public double TotalHours { get; private set; }

        /// <summary>
        /// Returns false as TotalHours should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalHours()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalMilliseconds
        /// </summary>
        [DataMember(Name = "totalMilliseconds", EmitDefaultValue = false)]
        public double TotalMilliseconds { get; private set; }

        /// <summary>
        /// Returns false as TotalMilliseconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalMilliseconds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalMinutes
        /// </summary>
        [DataMember(Name = "totalMinutes", EmitDefaultValue = false)]
        public double TotalMinutes { get; private set; }

        /// <summary>
        /// Returns false as TotalMinutes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalMinutes()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets TotalSeconds
        /// </summary>
        [DataMember(Name = "totalSeconds", EmitDefaultValue = false)]
        public double TotalSeconds { get; private set; }

        /// <summary>
        /// Returns false as TotalSeconds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalSeconds()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeSpan {\n");
            sb.Append("  Ticks: ").Append(Ticks).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Milliseconds: ").Append(Milliseconds).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  TotalDays: ").Append(TotalDays).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  TotalMilliseconds: ").Append(TotalMilliseconds).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("  TotalSeconds: ").Append(TotalSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
